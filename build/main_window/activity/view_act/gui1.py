
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Frame, StringVar, Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox
from tkinter.ttk import Treeview
import controller as db_controller

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def view_activity():
    ViewActivity()


class ViewActivity(Frame):
    def __init__(self, parent, controller=None, *args, **kwargs):
        Frame.__init__(self, parent, *args, **kwargs)
        self.parent = parent
        self.search_query = StringVar()

        canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 655,
            width = 1032,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        canvas.create_rectangle(
            0.0,
            0.0,
            1032.0,
            655.0,
            fill="#FFFFFF",
            outline="")

        canvas.create_rectangle(
            83.0,
            153.2978515625,
            948.0,
            508.6701965332031,
            fill="#D9D9D9",
            outline="")

        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        image_1 = canvas.create_image(
            517.0,
            92.831298828125,
            image=self.image_image_1
        )

        self.button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        button_1 = Button(
            self,
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.handle_delete,
            relief="flat"
        )
        button_1.place(
            x=717.0,
            y=528.5791015625,
            width=231.0,
            height=54.74924087524414
        )

        self.button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        button_2 = Button(
            self,
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.parent.navigate("add"),
            relief="flat"
        )
        button_2.place(
            x=72.0,
            y=72.0,
            width=81.0,
            height=73.0
        )

        self.button_image_3 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        button_3 = Button(
            self,
            image=self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=self.handle_edit,
            relief="flat"
        )
        button_3.place(
            x=467.0,
            y=529.0,
            width=231.0,
            height=54.74924087524414
        )

        entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        entry_bg_1 = canvas.create_image(
            843.0,
            122.0,
            image=entry_image_1
        )
        entry_1 = Entry(
            self,
            bd=0,
            bg="#EFEFEF",
            fg="#000716",
            highlightthickness=0,
            textvariable=self.search_query
        )
        entry_1.bind(
            "<KeyRelease>",
            lambda event: self.filter_treeview_records(self.search_query.get()),
        )
        
        entry_1.place(
            x=756.0,
            y=111.0,
            width=174.0,
            height=20.0
        )
        
        
        self.columns = {
            "id": ["ID", 100],
            "act1": ["Activity", 130],
            "dur": ["Duration",130],
            "d_t": ["Date & Time", 130],
            "note": ["Notes",150]
        }
        
        self.treeview = Treeview(
            self,
            columns=list(self.columns.keys()),
            show="headings",
            height=200,
            selectmode="browse",
            # ="#FFFFFF",
            # fg="#5E95FF",
            # font=("Montserrat Bold", 18 * -1)
        )
        
        # Show the headings
        for idx, txt in self.columns.items():
            self.treeview.heading(idx, text=txt[0])
            # Set the column widths
            self.treeview.column(idx, width=txt[1])

        self.treeview.place(x=83, y=153.3, width=865, height=355.37)
        
        # Insert data
        self.handle_refresh()
     
         # Add selection event
        self.treeview.bind("<<TreeviewSelect>>", self.on_treeview_select)
        
    def filter_treeview_records(self, query):
        self.treeview.delete(*self.treeview.get_children())
        # run for loop from original data
        for row in self.act_data1:
            # Check if query exists in any value from data
            if query.lower() in str(row).lower():
                # Insert the data into the treeview
                self.treeview.insert("", "end", values=row)
        self.on_treeview_select()

    def on_treeview_select(self, event=None):
        try:
            self.treeview.selection()[0]
        except:
            self.parent.selected_rid = None
            return
        # Get the selected item
        item = self.treeview.selection()[0]
        # Get the room id
        self.parent.selected_rid = self.treeview.item(item, "values")[0]
        # Enable the buttons
        self.delete_btn.config(state="normal")
        self.edit_btn.config(state="normal")
        
    def handle_refresh(self):
        self.treeview.delete(*self.treeview.get_children())
        self.act_data1 = db_controller.get_activity()
        print("gui1",self.act_data1)
        for row in self.act_data1:
                self.treeview.insert("", "end", values=row)
            
    def handle_delete(self):
        if db_controller.delete_activity(self.parent.selected_rid):
            messagebox.showinfo("Success", "Successfully Deleted the activity")
        else:
            messagebox.showerror("Error" ,"Unable to delete activity")

        self.handle_refresh()
        
    def handle_navigate_back(self):
        self.parent.navigate("add")
        
    def handle_edit(self):
        self.parent.navigate("up")
        self.parent.windows["up"].initialize()
        
