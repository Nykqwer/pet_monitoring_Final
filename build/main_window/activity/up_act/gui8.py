
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Frame, StringVar, Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox
import controller as db_controller

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def up_activity():
    UpActivity()


class UpActivity(Frame):
    def __init__(self, parent, controller=None, *args, **kwargs):
        Frame.__init__(self, parent, *args, **kwargs)
        self.parent = parent
        
        
        self.data = {"id": StringVar(),"type_act": StringVar(), "duration": StringVar(), "dt_act": StringVar(), "note": StringVar()}
        self.canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 655,
            width = 1032,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.canvas.place(x = 0, y = 0)
        self.canvas.create_rectangle(
            0.0,
            0.0,
            1032.0,
            655.0,
            fill="#FFFFFF",
            outline="")
        
        self.id_text =self.canvas.create_text(
            111.0,
            1000.0,
            anchor="nw",
            text="01",
            fill="#000000",
            font=("Montserrat SemiBold", 17 * -1)
        )

        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        image_1 = self.canvas.create_image(
            488.0,
            273.0,
            image=self.image_image_1
        )

        entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        entry_bg_1 = self.canvas.create_image(
            310.64942932128906,
            177.91891860961914,
            image=entry_image_1
        )
        entry_1 = Entry(
            self,
            bd=0,
            textvariable=self.data["type_act"],
            bg="#E6E6E6",
            fg="#000716",
            highlightthickness=0
        )
        entry_1.place(
            x=184.24658203125,
            y=163.0,
            width=252.80569458007812,
            height=27.83783721923828
        )

        self.canvas.create_text(
            184.0,
            165.0,
            anchor="nw",
            text="Running",
            fill="#000000",
            font=("Montserrat SemiBold", 17 * -1)
        )

        entry_image_2 = PhotoImage(
            file=relative_to_assets("entry_2.png"))
        entry_bg_2 = self.canvas.create_image(
            310.64942932128906,
            316.91891860961914,
            image=entry_image_2
        )
        entry_2 = Entry(
            self,
            bd=0,
            textvariable=self.data["duration"],
            bg="#E6E6E6",
            fg="#000716",
            highlightthickness=0
        )
        entry_2.place(
            x=184.24658203125,
            y=302.0,
            width=252.80569458007812,
            height=27.83783721923828
        )

        self.canvas.create_text(
            184.0,
            304.0,
            anchor="nw",
            text="20 mins",
            fill="#767272",
            font=("RobotoRoman SemiBold", 18 * -1)
        )

        entry_image_3 = PhotoImage(
            file=relative_to_assets("entry_3.png"))
        entry_bg_3 = self.canvas.create_image(
            670.6494293212891,
            176.91891860961914,
            image=entry_image_3
        )
        entry_3 = Entry(
            self,
            bd=0,
            textvariable=self.data["dt_act"],
            bg="#E6E6E6",
            fg="#000716",
            highlightthickness=0
        )
        entry_3.place(
            x=544.24658203125,
            y=162.0,
            width=252.80569458007812,
            height=27.83783721923828
        )

        self.canvas.create_text(
            544.0,
            164.0,
            anchor="nw",
            text="Oct 25 12 A.M",
            fill="#767272",
            font=("RobotoRoman SemiBold", 18 * -1)
        )

        entry_image_4 = PhotoImage(
            file=relative_to_assets("entry_4.png"))
        entry_bg_4 = self.canvas.create_image(
            670.5,
            369.5,
            image=entry_image_4
        )
        self.entry_4 = Text(
            self,
            bd=0,
            bg="#E6E6E6",
            fg="#000716",
            highlightthickness=0
        )
        self.entry_4.place(
            x=544.0,
            y=284.0,
            width=253.0,
            height=169.0
        )

        self.canvas.create_text(
            553.0,
            293.0,
            anchor="nw",
            text="gasdgdsgsgsdgsdgsdg",
            fill="#767272",
            font=("RobotoRoman SemiBold", 18 * -1)
        )

        self.button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        button_1 = Button(
            self,
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.handle_update,
            relief="flat"
        )
        button_1.place(
            x=377.0,
            y=551.0,
            width=231.0,
            height=54.74924087524414
        )

        self.button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        button_2 = Button(
            self,
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.parent.navigate("view"),
            relief="flat"
        )
        button_2.place(
            x=55.0,
            y=39.0,
            width=81.0,
            height=73.0
        )
        
    def initialize(self):
        self.selected_r_id = self.parent.selected_rid
        self.act_data = db_controller.get_activity()
 

        # Filter out all reservations for selected id reservation
        if self.act_data is not None:
            self.selected_act_data = list(
                filter(lambda x: str(x[0]) == self.selected_r_id, self.act_data)
            )

            if self.selected_act_data:
                self.selected_act_data = self.selected_act_data[0]

                self.canvas.itemconfigure(self.id_text, text=self.selected_act_data[0])
                self.data["type_act"].set(self.selected_act_data[1])
                self.data["duration"].set(self.selected_act_data[2])
                self.data["dt_act"].set(self.selected_act_data[3])
                self.data["note"] = self.selected_act_data[4]
                self.entry_4.delete('1.0', 'end')
                self.entry_4.insert('1.0', self.data["note"])
                
                
    def handle_update(self):
        result = db_controller.update_activity(
            self.selected_r_id,
            type_act = self.data["type_act"].get(),
            duration = self.data["duration"].get(),
            DT_act = self.data["dt_act"].get(),
            note=self.entry_4.get("1.0", "end-1c")

        )

        print("?? ", result)
        # Check if the update was successful
        if result:
            messagebox.showinfo("Success", "Details updated successfully")
            # Navigate back to the view window
            self.parent.navigate("view")
            # Refresh the view window to update the Treeview
            self.parent.windows.get("view").handle_refresh()
            # Clear all fields in the update frame
            
            for label in self.data.keys():
                self.data[label].set("")
            self.entry_4.delete('1.0', 'end')
        else:
            error_message = "Failed to update details. Please check your input and try again."
            messagebox.showerror("Error", error_message)

 
