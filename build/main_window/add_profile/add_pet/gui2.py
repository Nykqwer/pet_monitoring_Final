
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Frame, Label, StringVar, Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox
import controller as db_controller
from PIL import Image, ImageTk, ImageDraw
import base64
from tkinter import filedialog
OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def createProfile():
    CreateProfile()



class CreateProfile(Frame):
    def __init__(self, parent, controller=None, *args, **kwargs):
        Frame.__init__(self, parent, *args, **kwargs)
        self.parent = parent
        self.data = {"name": StringVar(), "breed": StringVar(), "age": StringVar(), "weight": StringVar(), "heal_con": StringVar()}


        canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 655,
            width = 1032,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        canvas.create_rectangle(
            0.0,
            0.0,
            1032.0,
            655.0,
            fill="#FFFFFF",
            outline="")

        canvas.create_rectangle(
            720.0,
            73.66265869140625,
            722.0,
            596.26904296875,
            fill="#EFEFEF",
            outline="")

        canvas.create_text(
            771.0,
            79.63525390625,
            anchor="nw",
            text="Pet Picture:",
            fill="#0BBC8B",
            font=("RobotoRoman Bold", 24 * -1)
        )

        self.button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        button_1 = Button(
            self,
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.save,
            relief="flat"
        )
        button_1.place(
            x=250.0,
            y=549.0,
            width=232.0,
            height=64.74923706054688
        )
        
        
        self.image_label = Label(self)
        self.image_label.pack()
        self.image_label.place(x=810, y=135)  # Set initial position

        # Add Open Image button
        self.open_button = Button(self, text="Open Image", command=self.open_image)
        self.open_button.pack()
        self.open_button.place(x=830, y=360) 

        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        image_1 = canvas.create_image(
            496.0,
            261.66259765625,
            image=self.image_image_1
        )

        entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        entry_bg_1 = canvas.create_image(
            178.64942932128906,
            214.64864826202393,
            image=entry_image_1
        )
        entry_1 = Entry(
            self,
            textvariable=self.data["name"],
            bd=0,
            bg="#E6E6E6",
            fg="#000716",
            highlightthickness=0
        )
        entry_1.place(
            x=52.24658203125,
            y=202.0,
            width=252.80569458007812,
            height=23.29729652404785
        )

        canvas.create_text(
            52.0,
            204.0,
            anchor="nw",
            text="Nah Iâ€™d Win",
            fill="#000000",
            font=("RobotoRoman SemiBold", 17 * -1)
        )

        entry_image_2 = PhotoImage(
            file=relative_to_assets("entry_2.png"))
        entry_bg_2 = canvas.create_image(
            178.64942932128906,
            324.6486482620239,
            image=entry_image_2
        )
        entry_2 = Entry(
            self,
            textvariable=self.data["age"],
            bd=0,
            bg="#E6E6E6",
            fg="#000716",
            highlightthickness=0
        )
        entry_2.place(
            x=52.24658203125,
            y=312.0,
            width=252.80569458007812,
            height=23.29729652404785
        )

        canvas.create_text(
            52.0,
            314.0,
            anchor="nw",
            text="4 yrs old",
            fill="#000000",
            font=("RobotoRoman SemiBold", 17 * -1)
        )

        entry_image_3 = PhotoImage(
            file=relative_to_assets("entry_3.png"))
        entry_bg_3 = canvas.create_image(
            356.1330261230469,
            424.6486482620239,
            image=entry_image_3
        )
        entry_3 = Entry(
            self,
            textvariable=self.data["heal_con"],
            bd=0,
            bg="#E6E6E6",
            fg="#000716",
            highlightthickness=0
        )
        entry_3.place(
            x=84.663818359375,
            y=412.0,
            width=542.9384155273438,
            height=23.29729652404785
        )

        canvas.create_text(
            84.13427734375,
            414.0,
            anchor="nw",
            text="Skin Issues",
            fill="#000000",
            font=("RobotoRoman SemiBold", 17 * -1)
        )

        entry_image_4 = PhotoImage(
            file=relative_to_assets("entry_4.png"))
        entry_bg_4 = canvas.create_image(
            520.6494293212891,
            324.6486482620239,
            image=entry_image_4
        )
        entry_4 = Entry(
            self,
            textvariable=self.data["weight"],
            bd=0,
            bg="#E6E6E6",
            fg="#000716",
            highlightthickness=0
        )
        entry_4.place(
            x=394.24658203125,
            y=312.0,
            width=252.80569458007812,
            height=23.29729652404785
        )

        canvas.create_text(
            394.0,
            314.0,
            anchor="nw",
            text="60KG",
            fill="#000000",
            font=("RobotoRoman SemiBold", 17 * -1)
        )

        entry_image_5 = PhotoImage(
            file=relative_to_assets("entry_5.png"))
        entry_bg_5 = canvas.create_image(
            520.6494293212891,
            214.64864826202393,
            image=entry_image_5
        )
        entry_5 = Entry(
            self,
            bd=0,
            textvariable=self.data["breed"],
            bg="#E6E6E6",
            fg="#000716",
            highlightthickness=0
        )
        entry_5.place(
            x=394.24658203125,
            y=202.0,
            width=252.80569458007812,
            height=23.29729652404785
        )

        canvas.create_text(
            394.0,
            204.0,
            anchor="nw",
            text="Maltese",
            fill="#000000",
            font=("RobotoRoman SemiBold", 17 * -1)
        )

        self.button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        button_2 = Button(
            self,
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.parent.navigate("view"),
            relief="flat"
        )
        button_2.place(
            x=24.0,
            y=51.0,
            width=81.0,
            height=73.0
        )
        
        
    def open_image(self):
        file_path = filedialog.askopenfilename(title="Select Image File",
                                                filetypes=[("Image files", "*.png;*.jpg;*.jpeg;*.gif")])
        if file_path:
            # Load the image and resize it to 130x130 pixels
            self.image_path = file_path
            original_image = Image.open(file_path)
            resized_image = original_image.resize((200, 200))

            # Create a circular mask
            mask = Image.new('L', (200, 200), 0)
            draw = ImageDraw.Draw(mask)
            draw.ellipse((0, 0, 200, 200), fill=255)

            # Apply the circular mask to the image
            circular_image = Image.new('RGBA', (200, 200), 0)
            circular_image.paste(resized_image, mask=mask)

            # Convert to PhotoImage for displaying in tkinter
            photo = ImageTk.PhotoImage(circular_image)

            # Configure the label with the circular image
            self.image_label.configure(image=photo)
            self.image_label.image = photo  # To keep a reference


            self.image_label.place(x=771, y=112.48)  # Adjust the x and y coordinates as needed

            # Change the button's placement
            self.open_button.place(x=830, y=360)
            
   
    def save(self):
        # check if any fields are empty
        for val in self.data.values():
            if val.get() == "":
                messagebox.showinfo("Error", "Please fill in all the fields")
                return
            
            # Check if the image path is available
        if not hasattr(self, 'image_path') or not self.image_path:
            messagebox.showinfo("Error", "Please open an image before saving")
            return
        
        encoded_image = self.get_encoded_image()
        
        print("Before calling db_controller.add_petInfo")
        result = db_controller.add_petInfo(
            *[self.data[label].get() for label in ("name","breed","age","weight","heal_con")],encoded_image,
        )
        if result:
            messagebox.showinfo("Success", "pet added successfully")
            self.parent.navigate("view")
            self.parent.windows.get("view").retrieve_data_from()
            # clear all fields
            for label in self.data.keys():
                self.data[label].set("")
        else:
            messagebox.showerror(
                "Error", "Unable to add pet. Please make sure the data is validated"
            )  
               
    def get_encoded_image(self):
        # Read the image file and encode it as base64
        with open(self.image_path, "rb") as image_file:
            encoded_image = base64.b64encode(image_file.read()).decode('utf-8')

        return encoded_image
    
  
       